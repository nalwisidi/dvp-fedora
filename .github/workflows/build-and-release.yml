name: Build and Release WSL Fedora for DevOps

on:
  release:
    types:
      - published

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Required for uploading release assets

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Build Docker image
    - name: Build Docker image
      run: docker build -t dvp-fedora .

    # Step 3: Export Docker container to tar
    - name: Export container to tar
      run: |
        docker create --name dvp_fedora_container dvp-fedora
        docker export dvp_fedora_container > dvp-fedora.tar
        docker rm dvp_fedora_container
        echo "Exported tar size: $(du -sh dvp-fedora.tar)"

    # Step 4: Compress tar file using xz
    - name: Compress tar file
      run: |
        xz -9 -T0 dvp-fedora.tar
        echo "Compressed file size: $(du -sh dvp-fedora.tar.xz)"

    # Step 5: Generate SHA256 hash
    - name: Generate SHA256 hash
      run: sha256sum dvp-fedora.tar.xz > dvp-fedora.tar.xz.sha256 && cat dvp-fedora.tar.xz.sha256

    # Step 6: Calculate split size dynamically
    - name: Calculate split size
      run: |
        MAX_SIZE=2000000000  # 2GB
        FILE_SIZE=$(stat --printf="%s" dvp-fedora.tar.xz)
        [[ $FILE_SIZE -le $MAX_SIZE ]] && echo "split_required=false" >> $GITHUB_ENV || {
          echo "split_required=true" >> $GITHUB_ENV
          echo "split_size=$(( ($FILE_SIZE + $MAX_SIZE - 1) / ($FILE_SIZE / $MAX_SIZE) ))" >> $GITHUB_ENV
        }

    # Step 7: Split tar file if required
    - name: Split tar file
      if: env.split_required == 'true'
      run: |
        split -b $(( ${{ env.split_size }} )) dvp-fedora.tar.xz dvp-fedora.tar.xz.part-
        echo "Split into $(ls dvp-fedora.tar.xz.part-* | wc -l) parts."

    # Step 8: Generate SHA256 hashes for split parts
    - name: Generate hashes for split parts
      if: env.split_required == 'true'
      run: sha256sum dvp-fedora.tar.xz.part-* > dvp-fedora.tar.xz.parts.sha256 && cat dvp-fedora.tar.xz.parts.sha256

    # Step 9: Upload release assets
    - name: Upload release assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if ls dvp-fedora.tar.xz.part-* 1> /dev/null 2>&1; then
          echo "Uploading split files..."
          for file in dvp-fedora.tar.xz.part-*; do gh release upload ${{ github.event.release.tag_name }} "$file" --clobber; done
          gh release upload ${{ github.event.release.tag_name }} dvp-fedora.tar.xz.parts.sha256 --clobber
        else
          echo "Uploading single file..."
          gh release upload ${{ github.event.release.tag_name }} dvp-fedora.tar.xz --clobber
          gh release upload ${{ github.event.release.tag_name }} dvp-fedora.tar.xz.sha256 --clobber
        fi

    # Step 10: Cleanup
    - name: Cleanup
      run: rm -f dvp-fedora.tar dvp-fedora.tar.xz dvp-fedora.tar.xz.part-* *.sha256